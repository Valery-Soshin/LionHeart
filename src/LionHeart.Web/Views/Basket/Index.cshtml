@using LionHeart.Web.Models.Basket
@model BasketViewModel

<div class="site-body-container">
    @if (Model.Entries.Any())
    {
        <form class="row" id="basket" method="post">
            <div class="col-8">
                <div class="card">
                    <div class="card-header main-theme">
                        <h3>Корзина</h3>
                    </div>
                    <div class="card-body bg-light p-4" id="card-body">
                        @for (int i = 0; i < Model.Entries.Count; i++)
                        {
                            var entry = @Model.Entries[i];

                            <div class="row d-flex justify-content-center align-items-center text-center position-relative">
                                <input hidden asp-for="Entries[i].Id" id="id-@entry.Id" value="@entry.Id" />
                                <input hidden asp-for="Entries[i].UserId" id="customer-id-@entry.Id" value="@entry.UserId" />
                                <input hidden asp-for="Entries[i].ProductId" id="product-id-@entry.Id" value="@entry.ProductId" />
                                <input hidden asp-for="Entries[i].ProductPrice" id="info-price-@entry.Id" value="@entry.ProductPrice" />
                                <div class="position-absolute top-0 start-0 text-start m-0 p-0">
                                    <button class="btn main-theme custom-btn" style="opacity: 0.9" onclick="removeFromBasket('@entry.ProductId')">🗑️</button>
                                </div>

                                <div class="col-2">
                                    <img src="/images/img2.jpg" class="img-thumbnail" style="width: 150px; border-radius: 25px">
                                </div>

                                <div class="col-4">
                                    <label id="label-info-name-@entry.Id">@entry.ProductName</label>
                                    <input hidden asp-for="Entries[i].ProductName" id="input-info-name-@entry.Id" value="@entry.ProductName" />
                                </div>

                                <div class="col-3 d-flex justify-content-center align-items-center text-center">
                                    <a class="btn fs-2 main-theme" style="border-radius: 70px; width: 50px;" onclick="subtract('@entry.Id')">-</a>

                                    <label id="label-quantity-@entry.Id" class="border-0 text-center" style="width: 40px; height: 40px; line-height:40px">@entry.ProductQuantity</label>
                                    <input hidden asp-for="Entries[i].ProductQuantity" id="input-quantity-@entry.Id" value="@entry.ProductQuantity" />

                                    <a class="btn fs-2 main-theme" style="border-radius: 70px; width: 50px;" onclick="add('@entry.Id')">+</a>
                                </div>

                                <div class="col-3 d-flex justify-content-end">
                                    @{
                                        var productsTotalPrice = (entry.ProductPrice * entry.ProductQuantity).ToString().Replace(",", ".");
                                    }
                                    <div class="main-theme p-2">
                                        <label id="label-products-total-price-@entry.Id" class="border-0">@productsTotalPrice</label><span>р</span>
                                    </div>

                                    <input hidden asp-for="Entries[i].ProductsTotalPrice" id="input-products-total-price-@entry.Id" value="@productsTotalPrice" />
                                </div>
                            </div>
                            @if (i != Model.Entries.Count - 1)
                            {
                                <hr />
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="card">
                    <div class="card-header main-theme">
                        Итого:
                    </div>
                    <div class="card-body">
                        <div>
                            <div>
                                Товаров: @Model.Entries.Sum(e => e.ProductQuantity)
                            </div>
                            <div>
                                Стоимость всего:
                                <label id="label-basket-total-price-basket">@Model.BasketTotalPrice</label><span>р</span>
                                <input hidden asp-for="BasketTotalPrice" id="input-basket-total-price-basket" value="@Model.BasketTotalPrice" />
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button asp-action="CreateOrder" type="submit" class="btn btn-grad" form="basket">Заказать</button>
                        <button hidden id="update-basket" asp-action="UpdateBasket" type="submit" class="btn btn-grad" form="basket">Заказать</button>
                    </div>
                </div>
            </div>
        </form>
    }
    else
    {
        <div class="row m-5 text-center" style="color: #930667">
            <div>
                <h3>В корзине пока пусто</h3>
            </div>
            <div>
                <p>Загляните на главную, чтобы выбрать товары или найдите нужное в поиске</p>
            </div>
            <div class="d-flex justify-content-center">
                <div>
                    <a asp-action="Index" asp-controller="Products" class="btn btn-grad">Перейти на главную</a>
                </div>
            </div>
        </div>
    }
</div>
<script>
    async function add(basketEntryId) {
        var quantityLabel = document.getElementById('label-quantity-' + basketEntryId);
        var quantityInput = document.getElementById('input-quantity-' + basketEntryId);

        var totalProductsPriceLabel = document.getElementById('label-products-total-price-' + basketEntryId);
        var totalProductsPriceInput = document.getElementById('input-products-total-price-' + basketEntryId);

        var totalBasketPriceLabel = document.getElementById('label-basket-total-price-basket');
        var totalBasketPriceInput = document.getElementById('input-basket-total-price-basket');

        var basePrice = document.getElementById('info-price-' + basketEntryId);

        quantityLabel.textContent = +quantityInput.value + 1;
        quantityInput.value = +quantityInput.value + 1;

        totalProductsPriceLabel.textContent = (parseFloat(totalProductsPriceInput.value) + parseFloat(basePrice.value)).toFixed(1);
        totalProductsPriceInput.value = (parseFloat(totalProductsPriceInput.value) + parseFloat(basePrice.value)).toFixed(1);

        totalBasketPriceLabel.textContent = (parseFloat(totalBasketPriceInput.value) + parseFloat(basePrice.value)).toFixed(1);
        totalBasketPriceInput.value = (parseFloat(totalBasketPriceInput.value) + parseFloat(basePrice.value)).toFixed(1);

        updateEntry(basketEntryId, quantityInput.value);
    };

    async function subtract(basketEntryId) {
        var quantityLabel = document.getElementById('label-quantity-' + basketEntryId);
        var quantityInput = document.getElementById('input-quantity-' + basketEntryId);

        var totalProductsPriceLabel = document.getElementById('label-products-total-price-' + basketEntryId);
        var totalProductsPriceInput = document.getElementById('input-products-total-price-' + basketEntryId);

        var totalBasketPriceLabel = document.getElementById('label-basket-total-price-basket');
        var totalBasketPriceInput = document.getElementById('input-basket-total-price-basket');

        var basePrice = document.getElementById('info-price-' + basketEntryId);

        if (+quantityInput.value >= 2) {
            quantityLabel.textContent = +quantityInput.value - 1;
            quantityInput.value = +quantityInput.value - 1;

            totalProductsPriceLabel.textContent = (parseFloat(totalProductsPriceInput.value) - parseFloat(basePrice.value)).toFixed(1);
            totalProductsPriceInput.value = (parseFloat(totalProductsPriceInput.value) - parseFloat(basePrice.value)).toFixed(1);

            totalBasketPriceLabel.textContent = (parseFloat(totalBasketPriceInput.value) - parseFloat(basePrice.value)).toFixed(1);
            totalBasketPriceInput.value = (parseFloat(totalBasketPriceInput.value) - parseFloat(basePrice.value)).toFixed(1);

            updateEntry(basketEntryId, quantityInput.value);
        }
    };

    async function updateEntry(id, quantity) {
        await fetch("/Basket/UpdateBasket", {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                entryid: id,
                productquantity: quantity
            })
        });
    };

    async function removeFromBasket(productId) {
        event.preventDefault();
        const response = await fetch("/Basket/RemoveFromBasket", {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(productId)
        });
        window.location.reload();
    }
</script>
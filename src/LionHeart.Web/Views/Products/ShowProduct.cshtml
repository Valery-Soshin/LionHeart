@using LionHeart.Web.Models
@using LionHeart.Web.Models.Products
@model ShowProductViewModel

@{
    ViewBag.Title = $"Товар: {Model.Name}";
}

<div class="site-body-container">
    <div class="row">
        <div class="col-5 mt-5">
            <div id="carouselExample" class="carousel slide show-product">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="/images/@Model.ImageName" class="img-thumbnail show-product border-0">
                    </div>
                    <div class="carousel-item">
                        <img src="/images/@Model.ImageName" class="img-thumbnail show-product border-0">
                    </div>
                    <div class="carousel-item">
                        <img src="/images/@Model.ImageName" class="img-thumbnail show-product border-0">
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
        <div class="col-4 mt-5">
            <div class="p-4">
                <h3>@Model.Name</h3>
                <p>
                    @await Html.PartialAsync("/Views/Feedbacks/ShowFeedbackCounter.cshtml",
                             new ShowFeedbackCounterViewModel { TotalRating = Model.TotalRating, FeedbackQuantity = Model.FeedbackQuantity })
                </p>
                <p>@Model.Description</p>
                <p>@Model.Specifications</p>
            </div>
        </div>
        <div class="col-3 mt-5">
            <p class="main-color fw-bold fs-4">@Model.Price ₽</p>
            @if (Model.IsDeleted)
            {
                <button disabled class="btn btn-grad w-75 m-0">Удален</button>
            }
            else if (!Model.IsInStock)
            {
                <button disabled class="btn btn-grad w-75 m-0">Нет в наличии</button>
            }
            else
            {
                <button onclick="buyProduct('@Model.Id')" class="btn btn-grad w-75 m-0">В корзину</button>
            }
            @if (Model.WriteFeedback)
            {
                <br />
                <a asp-action="CreateFeedback" asp-controller="Feedbacks" asp-route-productId="@Model.Id" class="btn btn-grad w-75 m-0">Написать отзыв</a>
            }
        </div>
    </div>
    <br />
    <br />
    <div class="row">
        @if (Model.HasFeedbacks)
        {
            <div class="d-flex justify-content-center">
                <button id="load-feedbacks" class="btn btn-grad w-50 p-4">Посмотреть отзывы</button>
            </div>
            <div id="feedbacks-content"></div>
        }
    </div>
</div>

@section Scripts {
    <script>
        async function addToBasket(productId) {
            event.preventDefault();
            await fetch("/Basket/AddToBasket", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(productId)
            });
            window.location.reload();
        };
        async function removeFromBasket(productId) {
            event.preventDefault();
            await fetch("/Basket/RemoveFromBasket", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(productId)
            });
            window.location.reload();
        };
        async function buyProduct(productId) {
            event.preventDefault();
            const response = await fetch("/Basket/AddToBasket", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(productId)
            });
            window.location.pathname = "/Basket/Index";
        };
        $("#load-feedbacks").click(function (event) {
            $("#load-feedbacks").hide();
            $.ajax({
                url: "/Feedbacks/ListFeedbacks?productId=@Model.Id",
                type: "GET",
                success: function (response) {
                    $("#feedbacks-content").empty();
                    $("#feedbacks-content").html(response);
                    $(response).find('script').each(function () {
                        let scriptContent = $(this).text();
                        try {
                            eval(scriptContent);
                        } catch (error) {
                            console.error("Ошибка при выполнении JavaScript кода:", error);
                        }
                    });
                },
                error: function (error) {
                    console.error("Ошибка при выполнении AJAX-запроса:", error);
                }
            });
        });
    </script>
}